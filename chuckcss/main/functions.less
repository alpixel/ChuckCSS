/*
    == FUNCTIONS / MIXINS ==
*/

/*
** Functions/mixins list **
    ._bg-vertical | ._bg-horizontal
    ._clearfix
    ._inside
    ._transition
    ._transform
    ._rotate | ._scale | ._translate | ._skew
    ._filter (grayscale, blur, sepia, etc..) | all CSS3 "filter" properties
    ._reset
    ._cover
    ._truncate
    ._btn
*/


/* *****
    @name : background-gradient : horizontal || vertical
    @description : apply a grandient background color to a DOM element
    @params : @from (rgba or HEXA code), @to (rgba or HEXA code)

    NOTICE : For others background-gradients (diagonal, radial, transparent, etc...), please use the generator.
    @Generator : http://www.colorzilla.com/gradient-editor/
***** */
._bg-vertical(@from:#000, @to:#fff) {
      background: @from; /* Old browsers */
      background: linear-gradient(to bottom,  @from 0%, @to 100%); /* W3C */
}
._bg-horizontal(@from:#000, @to:#fff) {
      background: @from; /* Old browsers */
      background: linear-gradient(to right,  @from 0%, @to 100%); /* W3C */
}
/* *****
    @name : ._clearfix
    @description : reset floated elements
***** */
.clearfix {._clearfix;}
._clearfix() {
    zoom:1;
    &:before,
    &:after {
        content: ".";
        display: block;
        height: 0;
        overflow: hidden
    }
    &:after {clear: both}
}
/* *****
    @name : ._inside
    @description : Auto-center a DOM element with specific width (very usefull for responsive integration)
    @params : @width

    @exemple :
      el {
        ._inside; // <el> is now horizontaly centered in the page, with responsive behavior
      }
***** */
._inside(@width:@l-media-mw) when (isnumber(@width)) {
    width: @width;
    margin:0 auto;
    ._transition(.2s,width);
}
/* *****
    @name : ._transition
    @description : animate a DOM element with transition property
    @params : @duration (0 - ∞ seconds), @property (all or css rules), @effect (easing effects or Cubic-bezier curve), @delay (0 - ∞ seconds)
    @Generator for custom & cool Cubic-Bezier effects : http://cubic-bezier.com/

    @exemple :
      a {
        opacity0.5; // Default, apply a half-opacity to <a>
        ._transition; // Animate <a> on hover (all CSS properties)
        ._transition(0.4, opacity); // Animate only opacity on hover with a duration of 0.4s

        &:hover {
          background-color:red;
          opacity:1; // Animate opacity with smoothy animation
        }
      }
***** */
._transition(@duration:.2s, @property:all, @effect:ease-out, @delay:0s) {
    transition:@arguments;
}
/* *****
    @name : ._transform
    @description : Apply transform property to a DOM element
    @params : CSS3 transform effects : you can pass a 2D or 3D transform function in parameters : ._rotate, ._scale, ._translate, ._skew

    NOTICE : You can call multi-times 2D or 3D transform function

    @exemple :
      el {
        ._skew('',10deg,10deg);
        ._rotate(45deg);
      }

    will compile to
    el {
        transform: skew(10deg, 10deg) rotate(45deg);
    }
***** */
._transform(...) {
    transform+_: @arguments;
}
/* *****
    @exemples :
      el {
        ._rotate(5deg); // Default, <el> has a 5deg rotation when displayed.

        ._rotate(-10deg, 'X'); // Apply a -10deg rotation on X axis only

        ._rotate(-10deg, 'X', 200); // Apply a -10deg rotation on X axis only with a 200 perspective
      }
***** */
._rotate(@deg:10deg, @axis:~'',@perspective : ~'') {
    /* Not perspective */
    & when not (isnumber(@perspective)) {
        ._transform(~"rotate@{axis}(@{deg})");
    }
    /* Perspective */
    & when (isnumber(@perspective)) {
        ._transform(~"perspective(@{perspective}) rotate@{axis}(@{deg})");
    }
}
/* *****
    @exemples :
      el {
        ._scale; // Default, <el> is scaled 1.2

        ._scale(0.8); // Only one value = <el> is scaled X & Y (0.8)

        ._scale(.8, 1.3); // Two values = <el> is scaled 0.8 on X axis & 1.3 on Y axis
      }
***** */
._scale(@x:~'', @y:~'', @default : 1.2) {
    /* X != Y */
    & when (isnumber(@y)) and (isnumber(@x)) and not (@x = @y) {
        ._transform(scale(@x,@y));
    }
    /* X only */
    & when (isnumber(@x)) and not (isnumber(@y)) {
        ._transform(scale(@x));
    }
    /* X & Y empty : default value */
    & when not (isnumber(@y)) and not (isnumber(@x)) {
        ._transform(scale(@default));
    }
}
/* *****
    @exemples :
      el {
        ._translate; // Default, <el> is translated to 10px on X, Y & Z axis

        ._translate(5px); // Default, <el> is translated to 5px on X, Y & Z axis

        ._translate(15px, 5px, 0px); // Default, <el> is translated to 15px on X axis, 5px on Y axis, 0px on Z axis
      }
***** */
._translate(@x:0px, @y:0px, @z:0px) {
    ._transform(translate3d(@x, @y, @z));
}
/* *****
    @exemples :
      el {
        ._skew; // Non-sens :/ Params are required

        ._skew('X', 10deg); // <el> is skewed to 10deg on X axis

        ._skew('X', 10deg, 5deg); // <el> is skewed to 10deg on X axis & 5deg to Y axis
      }
***** */
._skew(@axis:~'', @x:~'', @y:~'') {
    /* X only */
    & when (isstring(@axis)) and (isnumber(@x)) and not (isnumber(@y)) {
        ._transform(~"skew@{axis}(@{x})");
    }
    /* Y only */
    & when (isstring(@axis)) and (isnumber(@y)) and not (isnumber(@x)) {
        ._transform(~"skew@{axis}(@{y})");
    }
    /* X and Y : no @axis */
    & when (isnumber(@y)) and (isnumber(@x)) {
        ._transform(~"skew(@{x}, @{y})");
    }
}
/* *****
    @name : ._filter
    @params : all CSS3 filters : blur, grayscale, drop-shadow, sepia, brightness, constrast, invert...
    @full exemples : http://html5-demos.appspot.com/static/css/filters/index.html

    NOTICE : You can call multi-times filters funtions

    @exemple :
      el {
        // The 2 lines below...
        ._filter(blur(1px)); // Apply blur effect
        ._filter(sepia(1)); // Apply sepia effect

        // ...are the same as
        ._filter(blur(1px) sepia(1)); // Apply blur and sepia effects
      }

      will compile to :
      el {
          filter: blur(1px) sepia(1);
      }
***** */
._filter(...) {
    filter+_: @arguments;
}
/* *****
    @name : ._reset
    @description : reset margin, border & padding properties in one function

    @exemple :
      el {
        ._reset; // Let be safe that <el> has no border, no padding, mo margin
      }
***** */
._reset() {
    padding:0;
    margin:0;
    border:0;
}
/* *****
    @name : ._cover
    @description : display background-image as cover css3 property

    @exemple :
      el {
        background-image : url('path_to_image/img.jpg');
        ._cover;
      }
***** */
._cover() {
    background-size: cover; /* Standard */
    background-repeat:no-repeat;
    background-position: center center;
    background-attachment: fixed;
    background-size:100% 100%\9; /* <= IE8 */
    background-position: center top\9; /* <= IE8 */
}
/* *****
    @name : ._truncate
    @description : add ellipsis to an element with specifid width;
    @params : @width (pixels)

    @exemple :
      el {
        ._truncate(200px); // <el> will be truncate at 200px
      }
***** */
._truncate(@width : 200px) when (ispixel(@width)) {
    width:@width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
/* *****
    @name : ._btn
    @description : generate btn links with unlimited background colors
    @params : @bg (button color (rgba, hexa)), @bgHover (button hover color (rgba, hexa))

    @exemple :
      button {
        // 2 colors
        ._btn(@red, @green); // <button> will be displayed with a red bg-color, and a green bg-color on hover (with smoothy animation)

        // 1 color
        ._btn(@red); // <button> will be displayed with a red bg-color, and a darken (10%) red bg-color on hover (with smoothy animation)
      }
***** */
._setBtnBgHover(@bg) {
    @bgHover : darken(@bg,10%);

    &:hover {
        background-color: @bgHover;
        border-color: @bgHover;
    }
}
._btn(@bg : @primary, @bgHover :~'') when (iscolor(@bg)) {
    background-color:@bg;
    border-color: @bg;

    /* If Hover is specified */
    & when (iscolor(@bgHover)) {
        &:hover {
            background-color: @bgHover;
            border-color: @bgHover;
        }
    }
    /* else */
    & when not (iscolor(@bgHover)) {
        /* Hover color will be @bg but 10% darken */
        ._setBtnBgHover(@bg);
    }
}
